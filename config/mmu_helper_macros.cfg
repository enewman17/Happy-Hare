################################################
# MMU_STARTED  ADD MACRO TO MMU_MACRO_VARS: variable_user_print_state_changed_extension 'MMU_STARTED'
################################################
[gcode_macro MMU_STARTED]
description: Macro to call other macros when MMU state is STARTED

variable_event: {}

gcode:
  {% set event = params.EVENT|string %}
  {% if event == "restart" %}
    # ADD ALL G CODE MACROS YOU WANT TO RUN AFTER MMU STATE IS "RESTARTED"/READY, 
    # ADDING M400 AFTER EACH MACRO ENSURES IT FINISHES BEFOR THE NEXT ONE IS CALLED
    _BLOBIFIER_INIT
    M400
    BLOBIFIER_SERVO POS=OUT #Servo didn't work correctly when run through blobifier sanity check
    G4 P2000
    BLOBIFIER_SERVO POS=IN  #Servo didn't work correctly when run through blobifier sanity check
    M400
  {% endif %}


################################################
# MMU_ENABLE
################################################
[gcode_macro MMU_ENABLE]
description: Turn MMU on or off
gcode:
    {% set STATE = params.STATE|default(1)|int %}
    MMU ENABLE={STATE}


################################################
# MMU_CALIBRATE_SELECTOR
################################################
[gcode_macro MMU__CALIBRATE_SELECTOR]
description: Step 1: Calibrates the Selector Positioning 
             Leave "GATE" blank for all gates or select the gate to calibrate. 0 - N
             Remember this will extrapolate from measurements form Gate Zero.
             If enabled "SINGLE" will calibrate individual gate distances.            
gcode:
    {% set SINGLE = params.SINGLE|default('')|int %}
    {% set GATE = params.GATE_NUMBER|default('')|int %}
    {% set BYPASS = params.BYPASS|default('')|int %}
    {% set SAVE = params.SAVE|default(1)|int %}
    
    {% if SINGLE != 1 and GATE == '' and BYPASS != 1 %}
      {% if SAVE != 1 %} # 0 WILL TEST SELECTORS CALIBRATION FOR VERIFICATION
        MMU_CALIBRATE_SELECTOR SAVE={SAVE}
      {% else %}
        MMU_CALIBRATE_SELECTOR
      {% endif %}
    {% else %}
      {% if SINGLE != 1 and GATE != '' and BYPASS != 1 %}
        {% if SAVE != 1 %} # 0 WILL TEST SELECTORS CALIBRATION FOR VERIFICATION
          MMU_CALIBRATE_SELECTOR GATE={GATE} SAVE={SAVE}
        {% else %}
          MMU_CALIBRATE_SELECTOR GATE={GATE}
        {% endif %}
      {% else %}
        {% if SINGLE == 1 and GATE != '' and BYPASS != 1 %}
          SET_GCODE_VARIABLE MACRO=_MMU_SINGLE_GATE_CAL VARIABLE=gate VALUE={GATE} # TRANSFER THE GATE NUMBER TO CALIBRATE
          SET_GCODE_VARIABLE MACRO=_MMU_SINGLE_GATE_CAL VARIABLE=save VALUE={SAVE} # TRANSFER SAVE FOR TEST PURPOSE
          MMU_SERVO POS=MOVE
          M117 SELECTOR SERVO TO MOVE POSITION
          MMU_MOTORS_OFF
          M117 MOTORS OFF
          _CALIBRATE_MMU_GATE_PROMPT
        {% else %}
          {% if GATE == '' and SINGLE != 1 and BYPASS != 0 %}
            SET_GCODE_VARIABLE MACRO=_MMU_SINGLE_GATE_CAL VARIABLE=gate VALUE={GATE} # TRANSFER THE GATE NUMBER TO CALIBRATE
            SET_GCODE_VARIABLE MACRO=_MMU_SINGLE_GATE_CAL VARIABLE=save VALUE={SAVE} # TRANSFER SAVE FOR TEST PURPOSE
            SET_GCODE_VARIABLE MACRO=_MMU_SINGLE_GATE_CAL VARIABLE=bypass VALUE={BYPASS}
            MMU_SERVO POS=MOVE
            M117 SELECTOR SERVO TO MOVE POSITION
            MMU_MOTORS_OFF
            M117 MOTORS OFF
            _CALIBRATE_MMU_GATE_BYPASS
          {% endif %}
        {% endif %}
      {% endif %}
    {% endif %}

[gcode_macro _CALIBRATE_MMU_GATE_PROMPT]
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin Single Gate Position Calibration"
  RESPOND TYPE=command MSG="action:prompt_text Move selector to gate position. Using a piece of filament, align gate with selector and then hit continue"
  RESPOND TYPE=command MSG="action:prompt_footer_button CONTINUE|_MMU_SINGLE_GATE_CAL"
  RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|RESPOND TYPE=command MSG="action:prompt_end""
  RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro _MMU_SINGLE_GATE_CAL]
variable_single: 1
variable_gate: 0
variable_save: 1                    # 0 WILL TEST SELECTORS CALIBRATION FOR VERIFICATION

gcode:
  RESPOND TYPE=command MSG="action:prompt_end"
  MMU_SERVO POS=MOVE
  M117 SELECTOR SERVO TO MOVE POSITION
  {% if save != 1 %} # 0 WILL TEST SELECTORS CALIBRATION FOR VERIFICATION
    MMU_CALIBRATE_SELECTOR SINGLE={single} GATE={gate} SAVE{save}
  {% else %}
    MMU_CALIBRATE_SELECTOR SINGLE={single} GATE={gate}
  {% endif %}


  [gcode_macro _CALIBRATE_MMU_GATE_BYPASS]
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin Bypass Position Calibration"
  RESPOND TYPE=command MSG="action:prompt_text Move selector to bypass position. Using a piece of filament, align bypass with selector and then hit continue"
  RESPOND TYPE=command MSG="action:prompt_footer_button CONTINUE|_MMU_CAL_GATE_BYPASS"
  RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|RESPOND TYPE=command MSG="action:prompt_end""
  RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro _MMU_CAL_GATE_BYPASS]
variable_single: 0
variable_gate: 0
variable_save: 1                    # 0 WILL TEST SELECTORS CALIBRATION FOR VERIFICATION
variable_bypass: 1

gcode:
  RESPOND TYPE=command MSG="action:prompt_end"
  MMU_SERVO POS=MOVE
  M117 SELECTOR SERVO TO MOVE POSITION
  {% if SAVE != 1 %} # 0 WILL TEST SELECTORS CALIBRATION FOR VERIFICATION
    MMU_CALIBRATE_SELECTOR BYPASS={bypass} SAVE={save}
  {% else %}
    MMU_CALIBRATE_SELECTOR BYPASS={bypass}
  {% endif %}
################################################
# MMU_CALIBRATE_GATES
################################################
[gcode_macro MMU__CALIBRATE_GATES]
description: Optional calibration of each gates rotaion distance. 
              This is calculated as a ratio of gate ZERO and 
              thus this is usually the last calibration step
gcode:
    {% set ALL = params.ALL_GATES|default('')|int %}
    {% set GATE = params.GATE_NUMBER|default('')|int %}
    {% set LENGTH = params.GATE_NUMBER|default(400)|int %}
    {% set REPEATS = params.GATE_NUMBER|default(3)|int %}
    {% set SAVE = params.GATE_NUMBER|default(1)|int %}
    {% if ALL != '' %}
      MMU_CALIBRATE_GATES ALL={ALL} LENGTH={LENGTH} REPEATS={REPEATS} SAVE={SAVE}
    {% elif ALL == '' and GATE != '' %}
      MMU_CALIBRATE_GATES GATE={GATE} LENGTH={LENGTH} REPEATS={REPEATS} SAVE={SAVE}
    {% endif %}


################################################
# MMU_TEST_MOVE
################################################
[gcode_macro MMU__TEST_MOVE]
description: Run a length of filamet through a gate
gcode: 
    {% set GATE_NUMBER = params.GATE_NUMBER|default(0)|int %}
    {% set TEST_LENGTH = params.TEST_LENGTH|default(100)|float %}
    {% if printer.mmu.enabled and not printer.mmu.is_homed %}
        HOMEING_PROMPT_MMU
    {% endif %} 
    MMU_SERVO POS=MOVE
    M117 SELECTOR SERVO TO MOVE POSITION
    M400
    MMU_SELECT GATE={GATE_NUMBER}
    M400
    MMU_SERVO POS=DOWN
    M117 SELECTOR SERVO TO DOWN POSITION
    M400
    MMU_TEST_MOVE MOVE={TEST_LENGTH}

[gcode_macro HOMEING_PROMPT_MMU]
gcode:
  RESPOND TYPE=command MSG="action:prompt_begin MMU HOMING ERROR"
  RESPOND TYPE=command MSG="action:prompt_text Attention: MMU is not homed. Would you like to home the MMU?"
  RESPOND TYPE=command MSG="action:prompt_footer_button Home_MMU|HOME_MMU_TEST_MOVE"
  RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|RESPOND TYPE=command MSG="action:prompt_end""
  RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro HOME_MMU_TEST_MOVE]
gcode:
  RESPOND TYPE=command MSG="action:prompt_end"
  MMU_SERVO POS=MOVE
  M117 SELECTOR SERVO TO MOVE POSITION
  MMU_HOME
  MMU__TEST_MOVE {rawparams}



################################################
# MMU_CALIBRATE_GEAR
################################################
[gcode_macro MMU__CALIBRATE_GEAR_ROTATION]
description: Step 3: Calibrates the rotaition of the filament feed stepper
gcode:
    {% set MEASURED = params.ACTUAL_MEASUREMENT|default()|float %}
    {% set TEST_LENGTH = params.TEST_LENGTH|default(100)|float %}
    {% set SAVE = params.SAVE|default(1)|int %}
    
    MMU_CALIBRATE_GEAR MEASURED={MEASURED} LENGTH={TEST_LENGTH} SAVE={SAVE}

[gcode_macro MMU__CALIBRATE_GEAR_RESET]
description: Resets the rotaition of the filament feed stepper
gcode:
    MMU_CALIBRATE_GEAR RESET=1



################################################
# MMU_CALIBRATE_BOWDEN
################################################
[gcode_macro MMU__CALIBRATE_BOWDEN]
description: Calibrates the bowden tube length
gcode:
    {% set LENGTH = params.BOWDEN_LENGTH|default()|float %}
    {% set HOMING_MAX = params.HOMING_MAX|default(100)|float %}
    {% set REPEATS = params.REPEATS|default(3)|int %}
    {% set SAVE = params.SAVE|default(1)|int %}
    MMU_CALIBRATE_BOWDEN BOWDEN_LENGTH={LENGTH} HOMING_MAX={HOMING_MAX} REPEATS={REPEATS} SAVE={SAVE}



################################################
# MMU_CALIBRATE_ENCODER
################################################
[gcode_macro MMU__CALIBRATE_ENCODER]
description: Calibrates encoder rotaion
gcode:
    {% set LENGTH = params.LENGTH|default("500")|int %}
    {% set REPEATS = params.REPEATS|default("6")|int %}
    {% set SPEED = params.SPEED|default("150")|int %}
    {% set ACCEL = params.ACCEL|default("4000")|int %}
    {% set SAVE = params.SAVE|default("1")|int %}
    
    MMU_CALIBRATE_ENCODER LENGTH={LENGTH} REPEATS={REPEATS} SPEED={SPEED} ACCEL={ACCEL} SAVE={SAVE}



################################################
# MMU_CALIBRATE_TOOLHEAD
################################################
[gcode_macro MMU_CALIBRATE_TOOLHEAD_SENSORS]
description: Optional calibration of key toolhead dimension and 
            toolhead cutting variables.
gcode:
    MMU_CALIBRATE_TOOLHEAD CLEAN=1

[gcode_macro MMU_CALIBRATE_TOOLHEAD_CUT_TIP]
description: Optional calibration of key toolhead dimension and 
            toolhead cutting variables.
gcode:
    MMU_CALIBRATE_TOOLHEAD CUT=1

[gcode_macro MMU_CALIBRATE_TOOLHEAD_OOZE_REDUCTION]
description: Optional calibration of key toolhead dimension and 
            toolhead cutting variables.
gcode:
    MMU_CALIBRATE_TOOLHEAD


################################################
# MMU_SERVO_UP
################################################
[gcode_macro MMU__SERVO_UP]
description: Move the servo to position
gcode:
    MMU_SERVO POS=UP
    M117 SELECTOR SERVO TO UP POSITION



################################################
# MMU_SERVO_DOWN
################################################
[gcode_macro MMU__SERVO_DOWN]
description: Move the servo to position
gcode:
    MMU_SERVO POS=DOWN
    M117 SELECTOR SERVO TO DOWN POSITION



################################################
# MMU_SERVO_MOVE
################################################
[gcode_macro MMU__SERVO_MOVE]
description: Move the servo to position
gcode:
    MMU_SERVO POS=MOVE
    M117 SELECTOR SERVO TO MOVE POSITION



################################################
# MMU_SERVO_ANGLE
################################################
[gcode_macro MMU__SERVO_ANGLE]
description: Sets the servo angle
gcode:
    {% set ANGLE = params.ANGLE|default("0")|int %}
    MMU_SERVO ANGLE={ANGLE}



################################################
# MMU_SERVO_SAVE_UP
################################################
[gcode_macro MMU__SERVO_SAVE_UP]
description: Saves the servo position up
gcode:
    MMU_SERVO POS=UP SAVE=1



################################################
#MMU_SERVO_SAVE_MOVE
################################################
[gcode_macro MMU__SERVO_SAVE_MOVE]
description: Saves the servo position move
gcode:
    MMU_SERVO POS=MOVE SAVE=1



################################################
# MMU_SERVO_SAVE_DOWN
################################################
[gcode_macro MMU__SERVO_SAVE_DOWN]
description: Saves the servo position down
gcode:
    MMU_SERVO POS=DOWN SAVE=1



################################################
# MMU_SENSORS
################################################
[gcode_macro MMU__SENSORS]
description: Report on the state of all sensors connected to the MMU
            DETAIL=[0|1] Whether to show all disabled sensors or just active ones
gcode:
    {% set DETAIL = params.DETAIL|default(1)|int %}
    MMU_SENSORS DETAIL={DETAIL}



################################################
# MMU_CALC_PURGE_VOLUMES
################################################
[gcode_macro MMU__CALC__PURGE__VOLUMES]
description: Calculate purge volume matrix based on filament
             color and algorithm for estimating flushing volume
gcode: 
    {% set MIN = params.PURGE_MINIMUM|default(0)|int %}
    {% set MAX = params.PURGE_MAXIMUM|default(800)|int %}
    {% set MULTIPLIER = params.MULTIPLIER|default(1.0)|int %}
    MMU_CALC_PURGE_VOLUMES MIN={MIN} MAX={MAX} MULTIPLIER={MULTIPLIER}



################################################
# MMU_LED
################################################
[gcode_macro MMU__LED]
description: Quick way to try or test modes of operation of optional MMU LEDs
            off|gate_status|filament_color|slicer_color 
gcode: 
    {% set ENABLE = params.ENABLE|default(1)|int %}
    {% set ANIMATION = params.ANIMATION|default(1)|int %}
    {% set ENTRY_EFFECT = params.ENTRY_EFFECT|default("gate_status")|string|upper %}
    {% set EXIT_EFFECT = params.EXIT_EFFECT|default("gate_status")|string|upper %}
    {% set FILAMENT_COLOR = params.FILAMENT_COLOR|default("slicer_color")|string|upper %}
    {% set QUIET = params.QUIET|default(0)|int %}

    MMU_LED ENABLE={ENABLE} ANIMATION={ANIMATION} ENTRY_EFFECT="{ENTRY_EFFECT}" EXIT_EFFECT="{EXIT_EFFECT}" FILAMENT_COLOR="{FILAMENT_COLOR}" QUIET={QUIET}




################################################
# MMU_SOAKTEST_SELECTOR
################################################
[gcode_macro MMU__SOAKTEST__SELECTOR]
description: Calculate purge volume matrix based on filament
             color and algorithm for estimating flushing volume
gcode: 
    {% set LOOP = params.LOOP|default(25)|int %}
    {% set SERVO = params.SERVO|default(1)|int %}
    {% set HOME = params.HOME|default(1)|int %}
    MMU_SOAKTEST_SELECTOR LOOP={LOOP} SERVO={SERVO} HOME={HOME}



################################################
# MMU_SOAKTEST_LOAD_SEQUENCE
################################################
[gcode_macro MMU__SOAKTEST__LOAD__SEQUENCE]
description: Calculate purge volume matrix based on filament
             color and algorithm for estimating flushing volume
gcode: 
    {% set LOOP = params.LOOP|default(10)|int %}
    {% set RANDOM = params.RANDOM|default(1)|int %}
    {% set FULL = params.FULL|default(1)|int %}
    MMU_SOAKTEST_SELECTOR LOOP={LOOP} RANDOM={RANDOM} FULL={FULL}
